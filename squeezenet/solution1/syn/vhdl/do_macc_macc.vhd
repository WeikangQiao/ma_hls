-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity do_macc_macc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    img_in_ce1 : OUT STD_LOGIC;
    img_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    filt_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_in_ce0 : OUT STD_LOGIC;
    filt_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    filt_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_in_ce1 : OUT STD_LOGIC;
    filt_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    prod_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prod_out_ce0 : OUT STD_LOGIC;
    prod_out_we0 : OUT STD_LOGIC;
    prod_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prod_out_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prod_out_ce1 : OUT STD_LOGIC;
    prod_out_we1 : OUT STD_LOGIC;
    prod_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of do_macc_macc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_170 : BOOLEAN;
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_1_s_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_1_s_reg_468_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_2_s_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_3_s_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_4_s_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_5_s_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_6_s_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_7_s_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal processing_element_products_8_s_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_1_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_2_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_3_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_4_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_5_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_6_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_7_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_ce : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_314_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component do_macc_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component do_macc_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    do_macc_fadd_32ns_32ns_32_5_full_dsp_U1 : component do_macc_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        din1 => grp_fu_298_p1,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p2);

    do_macc_fadd_32ns_32ns_32_5_full_dsp_U2 : component do_macc_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    do_macc_fmul_32ns_32ns_32_4_max_dsp_U3 : component do_macc_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_in_q0,
        din1 => filt_in_q0,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    do_macc_fmul_32ns_32ns_32_4_max_dsp_U4 : component do_macc_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_in_q1,
        din1 => filt_in_q1,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it9)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then
                ap_reg_ppstg_processing_element_products_1_s_reg_468_pp0_it1 <= processing_element_products_1_s_reg_468;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it2 <= processing_element_products_2_s_reg_503;
                ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it3 <= ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it2;
                ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it2 <= processing_element_products_3_s_reg_508;
                ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it3 <= ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it2;
                ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it4 <= ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then
                ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it2 <= processing_element_products_4_s_reg_523;
                ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it3 <= ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it2;
                ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it4 <= ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it3;
                ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it5 <= ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it4;
                ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it2 <= processing_element_products_5_s_reg_528;
                ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it3 <= ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it2;
                ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it4 <= ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it3;
                ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it5 <= ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it4;
                ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it6 <= ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then
                ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it2 <= processing_element_products_6_s_reg_533;
                ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it3 <= ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it2;
                ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it4 <= ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it3;
                ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it5 <= ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it4;
                ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it6 <= ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it5;
                ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it7 <= ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it6;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it2 <= processing_element_products_7_s_reg_538;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it3 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it2;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it4 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it3;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it5 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it4;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it6 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it5;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it7 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it6;
                ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it8 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it7;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it2 <= processing_element_products_8_s_reg_543;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it3 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it2;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it4 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it3;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it5 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it4;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it6 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it5;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it7 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it6;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it8 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it7;
                ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it9 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then
                processing_element_products_1_s_reg_468 <= grp_fu_314_p2;
                processing_element_products_reg_463 <= grp_fu_307_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                processing_element_products_2_s_reg_503 <= grp_fu_307_p2;
                processing_element_products_3_s_reg_508 <= grp_fu_314_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                processing_element_products_4_s_reg_523 <= grp_fu_307_p2;
                processing_element_products_5_s_reg_528 <= grp_fu_314_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                processing_element_products_6_s_reg_533 <= grp_fu_307_p2;
                processing_element_products_7_s_reg_538 <= grp_fu_314_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then
                processing_element_products_8_s_reg_543 <= grp_fu_307_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then
                tmp_5_1_reg_553 <= grp_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_5_2_reg_558 <= grp_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_5_3_reg_563 <= grp_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                tmp_5_4_reg_568 <= grp_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                tmp_5_5_reg_573 <= grp_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                tmp_5_6_reg_578 <= grp_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                tmp_5_7_reg_583 <= grp_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then
                tmp_s_reg_548 <= grp_fu_298_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg4_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it10, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it10))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;

    ap_return <= grp_fu_298_p2;

    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_130 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_170 assign process. --
    ap_sig_bdd_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_170 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_130)
    begin
        if (ap_sig_bdd_130) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_170)
    begin
        if (ap_sig_bdd_170) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- filt_in_address0 assign process. --
    filt_in_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                filt_in_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                filt_in_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                filt_in_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                filt_in_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                filt_in_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                filt_in_address0 <= "XXXX";
            end if;
        else 
            filt_in_address0 <= "XXXX";
        end if; 
    end process;


    -- filt_in_address1 assign process. --
    filt_in_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                filt_in_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                filt_in_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                filt_in_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                filt_in_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                filt_in_address1 <= "XXXX";
            end if;
        else 
            filt_in_address1 <= "XXXX";
        end if; 
    end process;


    -- filt_in_ce0 assign process. --
    filt_in_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            filt_in_ce0 <= ap_const_logic_1;
        else 
            filt_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- filt_in_ce1 assign process. --
    filt_in_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            filt_in_ce1 <= ap_const_logic_1;
        else 
            filt_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_298_ce <= ap_const_logic_1;

    -- grp_fu_298_p0 assign process. --
    grp_fu_298_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, processing_element_products_reg_463, tmp_5_1_reg_553, tmp_5_3_reg_563, tmp_5_5_reg_573, tmp_5_7_reg_583)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            grp_fu_298_p0 <= tmp_5_7_reg_583;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            grp_fu_298_p0 <= tmp_5_5_reg_573;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            grp_fu_298_p0 <= tmp_5_3_reg_563;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            grp_fu_298_p0 <= tmp_5_1_reg_553;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_298_p0 <= processing_element_products_reg_463;
        else 
            grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_298_p1 assign process. --
    grp_fu_298_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it3, ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it5, ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it7, ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it9)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            grp_fu_298_p1 <= ap_reg_ppstg_processing_element_products_8_s_reg_543_pp0_it9;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            grp_fu_298_p1 <= ap_reg_ppstg_processing_element_products_6_s_reg_533_pp0_it7;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            grp_fu_298_p1 <= ap_reg_ppstg_processing_element_products_4_s_reg_523_pp0_it5;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            grp_fu_298_p1 <= ap_reg_ppstg_processing_element_products_2_s_reg_503_pp0_it3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_298_p1 <= ap_const_lv32_0;
        else 
            grp_fu_298_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_303_ce <= ap_const_logic_1;

    -- grp_fu_303_p0 assign process. --
    grp_fu_303_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, tmp_s_reg_548, tmp_5_2_reg_558, tmp_5_4_reg_568, tmp_5_6_reg_578)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            grp_fu_303_p0 <= tmp_5_6_reg_578;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            grp_fu_303_p0 <= tmp_5_4_reg_568;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            grp_fu_303_p0 <= tmp_5_2_reg_558;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            grp_fu_303_p0 <= tmp_s_reg_548;
        else 
            grp_fu_303_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_303_p1 assign process. --
    grp_fu_303_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_reg_ppstg_processing_element_products_1_s_reg_468_pp0_it1, ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it4, ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it6, ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            grp_fu_303_p1 <= ap_reg_ppstg_processing_element_products_7_s_reg_538_pp0_it8;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            grp_fu_303_p1 <= ap_reg_ppstg_processing_element_products_5_s_reg_528_pp0_it6;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            grp_fu_303_p1 <= ap_reg_ppstg_processing_element_products_3_s_reg_508_pp0_it4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            grp_fu_303_p1 <= ap_reg_ppstg_processing_element_products_1_s_reg_468_pp0_it1;
        else 
            grp_fu_303_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_307_ce <= ap_const_logic_1;
    grp_fu_314_ce <= ap_const_logic_1;

    -- img_in_address0 assign process. --
    img_in_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                img_in_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                img_in_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                img_in_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                img_in_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                img_in_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                img_in_address0 <= "XXXX";
            end if;
        else 
            img_in_address0 <= "XXXX";
        end if; 
    end process;


    -- img_in_address1 assign process. --
    img_in_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                img_in_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                img_in_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                img_in_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                img_in_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                img_in_address1 <= "XXXX";
            end if;
        else 
            img_in_address1 <= "XXXX";
        end if; 
    end process;


    -- img_in_ce0 assign process. --
    img_in_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            img_in_ce0 <= ap_const_logic_1;
        else 
            img_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- img_in_ce1 assign process. --
    img_in_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            img_in_ce1 <= ap_const_logic_1;
        else 
            img_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- prod_out_address0 assign process. --
    prod_out_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            prod_out_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            prod_out_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            prod_out_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            prod_out_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            prod_out_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            prod_out_address0 <= "XXXX";
        end if; 
    end process;


    -- prod_out_address1 assign process. --
    prod_out_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            prod_out_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            prod_out_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            prod_out_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            prod_out_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            prod_out_address1 <= "XXXX";
        end if; 
    end process;


    -- prod_out_ce0 assign process. --
    prod_out_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)))) then 
            prod_out_ce0 <= ap_const_logic_1;
        else 
            prod_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- prod_out_ce1 assign process. --
    prod_out_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)))) then 
            prod_out_ce1 <= ap_const_logic_1;
        else 
            prod_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- prod_out_d0 assign process. --
    prod_out_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, grp_fu_307_p2, grp_fu_314_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)))) then 
            prod_out_d0 <= grp_fu_307_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            prod_out_d0 <= grp_fu_314_p2;
        else 
            prod_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- prod_out_d1 assign process. --
    prod_out_d1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, grp_fu_307_p2, grp_fu_314_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)))) then 
            prod_out_d1 <= grp_fu_314_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            prod_out_d1 <= grp_fu_307_p2;
        else 
            prod_out_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- prod_out_we0 assign process. --
    prod_out_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)))) then 
            prod_out_we0 <= ap_const_logic_1;
        else 
            prod_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- prod_out_we1 assign process. --
    prod_out_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)))) then 
            prod_out_we1 <= ap_const_logic_1;
        else 
            prod_out_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
