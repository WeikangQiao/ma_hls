

================================================================
== Vivado HLS Report for 'do_macc'
================================================================
* Date:           Fri Apr 15 14:50:41 2016

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        squeezenet
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z045fbg676-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.26|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   53|   53|   54|   54|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 54
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
* FSM state operations: 

 <State 1>: 0.00ns
ST_1: call_ret [54/54] 0.00ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 2>: 9.26ns
ST_2: call_ret [53/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 3>: 9.26ns
ST_3: call_ret [52/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 4>: 9.26ns
ST_4: call_ret [51/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 5>: 9.26ns
ST_5: call_ret [50/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 6>: 9.26ns
ST_6: call_ret [49/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 7>: 9.26ns
ST_7: call_ret [48/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 8>: 9.26ns
ST_8: call_ret [47/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 9>: 9.26ns
ST_9: call_ret [46/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 10>: 9.26ns
ST_10: call_ret [45/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 11>: 9.26ns
ST_11: call_ret [44/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 12>: 9.26ns
ST_12: call_ret [43/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 13>: 9.26ns
ST_13: call_ret [42/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 14>: 9.26ns
ST_14: call_ret [41/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 15>: 9.26ns
ST_15: call_ret [40/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 16>: 9.26ns
ST_16: call_ret [39/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 17>: 9.26ns
ST_17: call_ret [38/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 18>: 9.26ns
ST_18: call_ret [37/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 19>: 9.26ns
ST_19: call_ret [36/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 20>: 9.26ns
ST_20: call_ret [35/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 21>: 9.26ns
ST_21: call_ret [34/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 22>: 9.26ns
ST_22: call_ret [33/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 23>: 9.26ns
ST_23: call_ret [32/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 24>: 9.26ns
ST_24: call_ret [31/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 25>: 9.26ns
ST_25: call_ret [30/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 26>: 9.26ns
ST_26: call_ret [29/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 27>: 9.26ns
ST_27: call_ret [28/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 28>: 9.26ns
ST_28: call_ret [27/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 29>: 9.26ns
ST_29: call_ret [26/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 30>: 9.26ns
ST_30: call_ret [25/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 31>: 9.26ns
ST_31: call_ret [24/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 32>: 9.26ns
ST_32: call_ret [23/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 33>: 9.26ns
ST_33: call_ret [22/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 34>: 9.26ns
ST_34: call_ret [21/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 35>: 9.26ns
ST_35: call_ret [20/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 36>: 9.26ns
ST_36: call_ret [19/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 37>: 9.26ns
ST_37: call_ret [18/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 38>: 9.26ns
ST_38: call_ret [17/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 39>: 9.26ns
ST_39: call_ret [16/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 40>: 9.26ns
ST_40: call_ret [15/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 41>: 9.26ns
ST_41: call_ret [14/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 42>: 9.26ns
ST_42: call_ret [13/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 43>: 9.26ns
ST_43: call_ret [12/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 44>: 9.26ns
ST_44: call_ret [11/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 45>: 9.26ns
ST_45: call_ret [10/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 46>: 9.26ns
ST_46: call_ret [9/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 47>: 9.26ns
ST_47: call_ret [8/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 48>: 9.26ns
ST_48: call_ret [7/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 49>: 9.26ns
ST_49: call_ret [6/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 50>: 9.26ns
ST_50: call_ret [5/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 51>: 9.26ns
ST_51: call_ret [4/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 52>: 9.26ns
ST_52: call_ret [3/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 53>: 9.26ns
ST_53: call_ret [2/54] 9.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind


 <State 54>: 7.26ns
ST_54: stg_108 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([9 x float]* %img_in) nounwind, !map !7

ST_54: stg_109 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([9 x float]* %filt_in) nounwind, !map !13

ST_54: stg_110 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(float* %sum_out) nounwind, !map !17

ST_54: stg_111 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap([9 x float]* %prod_out) nounwind, !map !21

ST_54: stg_112 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecTopModule([8 x i8]* @do_macc_str) nounwind

ST_54: call_ret [1/54] 7.26ns
:5  %call_ret = call fastcc float @do_macc_macc([9 x float]* %img_in, [9 x float]* %filt_in, [9 x float]* %prod_out) nounwind

ST_54: stg_114 [1/1] 0.00ns
:6  call void @_ssdm_op_Write.ap_auto.floatP(float* %sum_out, float %call_ret) nounwind

ST_54: stg_115 [1/1] 0.00ns
:7  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
